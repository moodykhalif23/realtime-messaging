const mongoose = require('mongoose');

const vitalSignsSchema = new mongoose.Schema({
  recordId: {
    type: String,
    unique: true,
    required: true
  },
  patient: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Patient',
    required: true
  },
  deviceId: {
    type: String,
    required: true
  },
  deviceType: {
    type: String,
    enum: ['wearable', 'monitor', 'sensor', 'manual', 'smartphone'],
    required: true
  },
  measurements: {
    heartRate: {
      value: Number,
      unit: { type: String, default: 'bpm' },
      timestamp: Date,
      quality: {
        type: String,
        enum: ['excellent', 'good', 'fair', 'poor'],
        default: 'good'
      }
    },
    bloodPressure: {
      systolic: Number,
      diastolic: Number,
      unit: { type: String, default: 'mmHg' },
      timestamp: Date,
      quality: {
        type: String,
        enum: ['excellent', 'good', 'fair', 'poor'],
        default: 'good'
      }
    },
    temperature: {
      value: Number,
      unit: { type: String, default: 'celsius' },
      timestamp: Date,
      location: {
        type: String,
        enum: ['oral', 'rectal', 'axillary', 'tympanic', 'temporal'],
        default: 'oral'
      }
    },
    oxygenSaturation: {
      value: Number,
      unit: { type: String, default: '%' },
      timestamp: Date,
      quality: {
        type: String,
        enum: ['excellent', 'good', 'fair', 'poor'],
        default: 'good'
      }
    },
    respiratoryRate: {
      value: Number,
      unit: { type: String, default: 'breaths/min' },
      timestamp: Date
    },
    bloodGlucose: {
      value: Number,
      unit: { type: String, default: 'mg/dL' },
      timestamp: Date,
      testType: {
        type: String,
        enum: ['fasting', 'random', 'postprandial', 'hba1c'],
        default: 'random'
      }
    },
    weight: {
      value: Number,
      unit: { type: String, default: 'kg' },
      timestamp: Date
    },
    height: {
      value: Number,
      unit: { type: String, default: 'cm' },
      timestamp: Date
    },
    bmi: {
      value: Number,
      timestamp: Date,
      calculated: { type: Boolean, default: true }
    }
  },
  location: {
    latitude: Number,
    longitude: Number,
    address: String,
    accuracy: Number
  },
  alerts: [{
    type: {
      type: String,
      enum: ['critical', 'warning', 'info'],
      required: true
    },
    parameter: String,
    value: Number,
    threshold: Number,
    message: String,
    severity: {
      type: String,
      enum: ['low', 'medium', 'high', 'critical'],
      required: true
    },
    acknowledged: {
      type: Boolean,
      default: false
    },
    acknowledgedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    acknowledgedAt: Date,
    autoGenerated: {
      type: Boolean,
      default: true
    }
  }],
  trends: {
    heartRateVariability: Number,
    bloodPressureTrend: {
      type: String,
      enum: ['improving', 'stable', 'worsening', 'unknown']
    },
    temperatureTrend: {
      type: String,
      enum: ['improving', 'stable', 'worsening', 'unknown']
    },
    overallStatus: {
      type: String,
      enum: ['excellent', 'good', 'concerning', 'critical'],
      default: 'good'
    }
  },
  metadata: {
    batteryLevel: Number,
    signalStrength: Number,
    dataQuality: {
      type: String,
      enum: ['excellent', 'good', 'fair', 'poor'],
      default: 'good'
    },
    calibrationDate: Date,
    firmwareVersion: String
  },
  notes: String,
  isEmergency: {
    type: Boolean,
    default: false
  },
  emergencyContacted: {
    type: Boolean,
    default: false
  },
  reviewedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Provider'
  },
  reviewedAt: Date,
  followUpRequired: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

// Indexes for performance (recordId index created automatically by unique: true)
vitalSignsSchema.index({ patient: 1, createdAt: -1 });
vitalSignsSchema.index({ deviceId: 1 });
vitalSignsSchema.index({ isEmergency: 1 });
vitalSignsSchema.index({ 'alerts.severity': 1 });
vitalSignsSchema.index({ createdAt: -1 });

// Compound indexes for common queries
vitalSignsSchema.index({ patient: 1, 'measurements.heartRate.timestamp': -1 });
vitalSignsSchema.index({ patient: 1, 'measurements.bloodPressure.timestamp': -1 });
vitalSignsSchema.index({ patient: 1, isEmergency: 1, createdAt: -1 });

module.exports = mongoose.model('VitalSigns', vitalSignsSchema);
